-- 
-- 
-- 
--   --- Visualize lsp progress
--   use({
--     "j-hui/fidget.nvim",
--     config = function()
--       require("fidget").init()
--     end,
--     dependencies = { 'neovim/nvim-lspconfig' },
--   })
-- 
-- 
--   --- VSCode snippets from cmp
--   use('hrsh7th/vim-vsnip')
-- 
--   -- Rust tools (TODO: i don't actually use many of these, read the docs)
--   use("simrat39/rust-tools.nvim")
-- 
--   -- Telescope
--   use("nvim-lua/popup.nvim")
--   use({
--     "nvim-telescope/telescope.nvim", tag = '0.1.1',
--     dependencies = {'nvim-lua/plenary.nvim' },
--   })
-- 
-- end)
-- 
-- -- Configure LSP through rust-tools.nvim plugin.
-- --- rust-tools will configure and enable certain LSP features for us.
-- --- See https://github.com/simrat39/rust-tools.nvim#configuration
-- local lsp_opts = {
--   tools = {
--     runnables = {
--       use_telescope = true,
--     },
--     inlay_hints = {
--       auto = true,
--       show_parameter_hints = false,
--       parameter_hints_prefix = "",
--       other_hints_prefix = "",
--     },
--   },
-- 
--   -- all the opts to send to nvim-lspconfig
--   -- these override the defaults set by rust-tools.nvim
--   -- see https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#rust_analyzer
--   server = {
--     -- on_attach is a callback called when the language serer attachs to the buffer
--     on_attach = on_rs_attach,
--     settings = {
--       -- to enable rust-analyzer settings visit:
--       -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
--       ["rust-analyzer"] = {
--         procMacro = {
--           enable=true,
--         },
--         -- enable clippy on save
--         checkOnSave = {
--           command = "clippy",
--         },
--       },
--     },
--   },
-- }
-- 
-- require("rust-tools").init(lsp_opts)
-- 
-- -- Color scheme
-- vim.cmd([[ colorscheme jellybeans ]])
